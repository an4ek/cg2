import cv2 # OpenCV - –æ—Å–Ω–æ–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
import numpy as np # NumPy - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
from sklearn.cluster import KMeans # –ê–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ K-means
import matplotlib.pyplot as plt # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
import matplotlib.patches as patches # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
from PIL import Image, ImageDraw, ImageFont # –†–∞—Å—Ç—Ä–æ–≤–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ä–∞–±–æ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏
import os # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import argparse # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

# –ü–∞–ª–∏—Ç—Ä–∞ DMC - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∏—Ç–æ–∫ –¥–ª—è –≤—ã—à–∏–≤–∫–∏
DMC_COLORS = {
    'White': (255, 255, 255),
    'Ecru': (240, 234, 218),
    'Black': (0, 0, 0),
    'DK Gray': (85, 85, 85),
    'MD Gray': (128, 128, 128),
    'LT Gray': (200, 200, 200),

    # –ö—Ä–∞—Å–Ω—ã–µ
    'Red': (255, 0, 0),
    'DK Red': (190, 0, 0),
    'Bright Red': (255, 50, 50),
    'Crimson': (220, 20, 60),

    # –†–æ–∑–æ–≤—ã–µ
    'Pink': (255, 192, 203),
    'DK Pink': (231, 84, 128),
    'LT Pink': (255, 182, 193),

    # –û—Ä–∞–Ω–∂–µ–≤—ã–µ
    'Orange': (255, 165, 0),
    'DK Orange': (255, 140, 0),
    'Coral': (255, 127, 80),

    # –ñ–µ–ª—Ç—ã–µ
    'Yellow': (255, 255, 0),
    'DK Yellow': (255, 215, 0),
    'LT Yellow': (255, 255, 200),

    # –ó–µ–ª–µ–Ω—ã–µ
    'Green': (0, 255, 0),
    'DK Green': (0, 100, 0),
    'Bright Green': (0, 255, 100),
    'Forest Green': (34, 139, 34),
    'LT Green': (144, 238, 144),

    # –°–∏–Ω–∏–µ
    'Blue': (0, 0, 255),
    'DK Blue': (0, 0, 139),
    'Bright Blue': (0, 100, 255),
    'Royal Blue': (65, 105, 225),
    'LT Blue': (173, 216, 230),

    # –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ
    'Purple': (128, 0, 128),
    'DK Purple': (75, 0, 130),
    'Violet': (238, 130, 238),
    'Lavender': (230, 230, 250),

    # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ
    'Brown': (165, 42, 42),
    'DK Brown': (101, 67, 33),
    'LT Brown': (210, 180, 140),
    'Tan': (210, 180, 140),
}


class CrossStitchConverter:
    def __init__(self, dmc_colors=DMC_COLORS):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ —Å –ø–∞–ª–∏—Ç—Ä–æ–π —Ü–≤–µ—Ç–æ–≤ DMC"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤ DMC
        self.dmc_colors = dmc_colors
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–≤–µ—Ç–∞ –≤ numpy –º–∞—Å—Å–∏–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self.dmc_colors_rgb = np.array(list(dmc_colors.values()))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        self.dmc_names = list(dmc_colors.keys())
        #dmc_colors: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ RGB –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∏—Ç–æ–∫
        #dmc_colors_rgb: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ NumPy –º–∞—Å—Å–∏–≤ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        #dmc_names: –û—Ç–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

    def load_image(self, image_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenCV
        self.image = cv2.imread(image_path)
        if self.image is None:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ BGR (—Ñ–æ—Ä–º–∞—Ç OpenCV) –≤ RGB
        self.image = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)

        self.image = self.enhance_image(self.image)

        print(f" –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {self.image.shape[1]}√ó{self.image.shape[0]} –ø–∏–∫—Å–µ–ª–µ–π")
        return self.image.shape[:2]

    def enhance_image(self, image):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –§–∏–ª—å—Ç—Ä —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏
        # –°–≤–µ—Ä—Ç–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 3x3: –õ–∞–ø–ª–∞—Å–∏–∞–Ω –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
        # –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã: –£—Å–∏–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã –∏ –¥–µ—Ç–∞–ª–∏
        kernel = np.array([[-1, -1, -1],
                           [-1, 9, -1],
                           [-1, -1, -1]])
        sharpened = cv2.filter2D(image, -1, kernel)

        # –†–∞–±–æ—Ç–∞ –≤ LAB —Ü–≤–µ—Ç–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        # L (Lightness): –Ø—Ä–∫–æ—Å—Ç–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        # A: –¶–≤–µ—Ç–æ–≤–∞—è –æ—Å—å –∑–µ–ª–µ–Ω—ã–π-–∫—Ä–∞—Å–Ω—ã–π
        # B: –¶–≤–µ—Ç–æ–≤–∞—è –æ—Å—å —Å–∏–Ω–∏–π-–∂–µ–ª—Ç—ã–π
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –∏ —Ü–≤–µ—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ª—É—á—à–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        lab = cv2.cvtColor(sharpened, cv2.COLOR_RGB2LAB)
        l, a, b = cv2.split(lab)

        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Å–∏–ª–µ–Ω–∏—è —à—É–º–∞
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        # clipLimit=2.0: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        # tileGridSize=(8,8): –†–∞–∑–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
        l = clahe.apply(l)

        # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        lab = cv2.merge([l, a, b])
        enhanced = cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)

        return enhanced

    def resize_image(self, max_stitches):
        h, w = self.image.shape[:2]
        #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ (—à–∏—Ä–∏–Ω–∞ –∏–ª–∏ –≤—ã—Å–æ—Ç–∞)
        #–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        #–ì–∞—Ä–∞–Ω—Ç–∏—è, —á—Ç–æ –Ω–∏ –æ–¥–Ω–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç max_stitches
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if w > h:
            new_w = min(max_stitches, w)
            new_h = int(h * new_w / w)
        else:
            new_h = min(max_stitches, h)
            new_w = int(w * new_h / h)

        new_w = max(new_w, 10)
        new_h = max(new_h, 10)

        print(f"üìê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {w}√ó{h} ‚Üí {new_w}√ó{new_h} –∫—Ä–µ—Å—Ç–∏–∫–æ–≤")

        # INTER_CUBIC –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è(–ë–∏–∫—É–±–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è)
        self.image_resized = cv2.resize(self.image, (new_w, new_h), interpolation=cv2.INTER_CUBIC)
        return new_w, new_h

#–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
    def reduce_colors(self, max_colors):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        # reshape(-1, 3): –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 2D –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ 1D –º–∞—Å—Å–∏–≤ –ø–∏–∫—Å–µ–ª–µ–π
        # –ö–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ç–æ—á–∫–∞ –≤ 3D RGB –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        pixels = self.image_resized.reshape(-1, 3)

        n_colors = min(max_colors, len(self.dmc_colors))
        print(f"–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ {n_colors} —Ü–≤–µ—Ç–æ–≤...")

        # K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
        # n_clusters: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö —Ü–≤–µ—Ç–æ–≤ –≤ –ø–∞–ª–∏—Ç—Ä–µ
        # random_state=42: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # n_init=5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π (–≤—ã–±–æ—Ä –ª—É—á—à–µ–π)
        # max_iter=300: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        kmeans = KMeans(n_clusters=n_colors, random_state=42, n_init=5, max_iter=300)
        labels = kmeans.fit_predict(pixels)

        reduced_colors = []
        color_mapping = {}

        # –ó–∞–º–µ–Ω–∞ –Ω–∞ —Ü–≤–µ—Ç–∞ DMC
        for i, center in enumerate(kmeans.cluster_centers_):
            distances = np.linalg.norm(self.dmc_colors_rgb - center, axis=1)
            closest_idx = np.argmin(distances)
            dmc_color = self.dmc_colors_rgb[closest_idx]
            dmc_name = self.dmc_names[closest_idx]

            reduced_colors.append(dmc_color)
            color_mapping[i] = (dmc_color, dmc_name)

        self.reduced_image = np.array([reduced_colors[label] for label in labels])
        self.reduced_image = self.reduced_image.reshape(self.image_resized.shape)

        self.reduced_image = cv2.medianBlur(self.reduced_image.astype(np.uint8), 1)

        self.color_labels = labels.reshape(self.image_resized.shape[:2])
        self.color_mapping = color_mapping
        self.actual_colors = n_colors

        return reduced_colors

#–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    def get_symbols(self, num_symbols):
        symbols = [
            '‚ñ†', '‚ñ°', '‚ñ≤', '‚ñ≥', '‚óè', '‚óã', '‚òÖ', '‚òÜ', '‚ô¶', '‚ô¢',
            '‚ô•', '‚ô°', '‚ô£', '‚ô§', '‚ô†', '‚ôß', '‚úì', '‚úó', '‚ú∂', '‚ú∑',
            '‚ú∏', '‚úπ', '‚ú∫', '‚úª', '‚úº', '‚úΩ', '‚úæ', '‚úø', '‚ùÄ', '‚ùÅ'
        ]

        # –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–∫–≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if num_symbols > len(symbols):
            symbols.extend([chr(i) for i in range(65, 91)])  # A-Z –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        if num_symbols > len(symbols):
            symbols.extend([chr(i) for i in range(97, 123)])  # a-z –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã

        return symbols[:num_symbols]

    #–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã
    def create_stitch_chart(self, output_path, grid_spacing=10):
        h, w = self.color_labels.shape
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
        # cell_size=25: –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫—Ä–µ—Å—Ç–∏–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        cell_size = 25

        img_width = w * cell_size + (w + 1) #–£—á–µ—Ç –≥—Ä–∞–Ω–∏—Ü –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
        img_height = h * cell_size + (h + 1)
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        pattern_image = Image.new('RGB', (img_width, img_height), 'white')
        draw = ImageDraw.Draw(pattern_image)

        try:
            font = ImageFont.truetype("arial.ttf", cell_size - 10)
        except:
            font = ImageFont.load_default()

        unique_colors = np.unique(self.color_labels)
        symbols = self.get_symbols(len(unique_colors))
        symbol_map = {}

        for i, color_idx in enumerate(unique_colors):
            symbol_map[color_idx] = symbols[i]

        for y in range(h):
            for x in range(w):
                color_idx = self.color_labels[y, x]
                dmc_color, dmc_name = self.color_mapping[color_idx]
                symbol = symbol_map[color_idx]

                x_pos = x * cell_size + x + 1
                y_pos = y * cell_size + y + 1
                # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
                draw.rectangle([x_pos, y_pos, x_pos + cell_size, y_pos + cell_size],
                               fill=tuple(dmc_color), outline='lightgray')

                bbox = draw.textbbox((0, 0), symbol, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]

                text_x = x_pos + (cell_size - text_width) // 2
                text_y = y_pos + (cell_size - text_height) // 2
                # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
                brightness = np.mean(dmc_color)
                text_color = 'black' if brightness > 128 else 'white'

                draw.text((text_x, text_y), symbol, fill=text_color, font=font)

        for x in range(0, w, grid_spacing):
            line_x = x * (cell_size + 1)
            if line_x < img_width:
                draw.line([(line_x, 0), (line_x, img_height)], fill='gray', width=1)
                draw.text((line_x + 5, 5), str(x + 1), fill='darkgray', font=font)

        for y in range(0, h, grid_spacing):
            line_y = y * (cell_size + 1)
            if line_y < img_height:
                draw.line([(0, line_y), (img_width, line_y)], fill='gray', width=1)
                draw.text((5, line_y + 5), str(y + 1), fill='darkgray', font=font)

        pattern_image.save(output_path, dpi=(300, 300))
        print(f"–°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        return symbol_map

#–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
    def create_legend(self, symbol_map, output_path):
        fig, ax = plt.subplots(figsize=(10, 12))
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')

        ax.text(0.1, 0.95, '–õ–ï–ì–ï–ù–î–ê –°–•–ï–ú–´ –í–´–®–ò–í–ö–ò', fontsize=16,
                fontweight='bold', ha='left', va='top')

        ax.text(0.1, 0.92, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {self.actual_colors}',
                fontsize=12, ha='left', va='top', style='italic')

        y_pos = 0.88
        for color_idx, symbol in symbol_map.items():
            dmc_color, dmc_name = self.color_mapping[color_idx]

            ax.text(0.1, y_pos, symbol, fontsize=14, ha='left', va='center',
                    fontfamily='DejaVu Sans', fontweight='bold')

            ax.text(0.2, y_pos, dmc_name, fontsize=11, ha='left', va='center',
                    fontweight='bold')

            rect = patches.Rectangle((0.5, y_pos - 0.015), 0.1, 0.03,
                                     facecolor=np.array(dmc_color) / 255,
                                     edgecolor='black', linewidth=1)
            ax.add_patch(rect)

            rgb_text = f"RGB({dmc_color[0]}, {dmc_color[1]}, {dmc_color[2]})"
            ax.text(0.65, y_pos, rgb_text, fontsize=9, ha='left', va='center',
                    alpha=0.7, style='italic')

            y_pos -= 0.04

            if y_pos < 0.05:
                ax.text(0.1, 0.02, '... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)',
                        fontsize=10, style='italic', alpha=0.7)
                break

        plt.tight_layout()
        plt.savefig(output_path, dpi=150, bbox_inches='tight', facecolor='white')
        plt.close()
        print(f"–õ–µ–≥–µ–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")

    #–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    def convert(self, image_path, max_colors=20, max_stitches=100, output_dir="cross_stitch_output"):
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        base_name = os.path.splitext(os.path.basename(image_path))[0]
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            self.load_image(image_path) # 1. –ó–∞–≥—Ä—É–∑–∫–∞

            w, h = self.resize_image(max_stitches) # 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞

            self.reduce_colors(max_colors) # 3. –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤

            pattern_file = os.path.join(output_dir, f"{base_name}_pattern.png")
            symbol_map = self.create_stitch_chart(pattern_file) # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã

            legend_file = os.path.join(output_dir, f"{base_name}_legend.png")
            self.create_legend(symbol_map, legend_file)# 5. –õ–µ–≥–µ–Ω–¥–∞

            print(f"–†–∞–∑–º–µ—Ä —Å—Ö–µ–º—ã: {w}√ó{h} –∫—Ä–µ—Å—Ç–∏–∫–æ–≤")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤: {self.actual_colors}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {output_dir}")
            print(f"   ‚Ä¢ {os.path.basename(pattern_file)} - —Å—Ö–µ–º–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏")
            print(f"   ‚Ä¢ {os.path.basename(legend_file)} - –ª–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤")

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            return False


def main():
    parser = argparse.ArgumentParser(description='–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ö–µ–º—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–º')
    parser.add_argument('image', help='–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é')
    parser.add_argument('--max-colors', type=int, default=20,
                        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –Ω–∏—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)')
    parser.add_argument('--max-stitches', type=int, default=100,
                        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)')
    parser.add_argument('--output-dir', default='cross_stitch_output',
                        help='–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: cross_stitch_output)')

    args = parser.parse_args()

    converter = CrossStitchConverter()
    success = converter.convert(
        image_path=args.image,
        max_colors=args.max_colors,
        max_stitches=args.max_stitches,
        output_dir=args.output_dir
    )

    if not success:
        print("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")


if __name__ == "__main__":
    if len(os.sys.argv) == 1:
        image_files = []
        for file in os.listdir('.'):
            if file.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff')):
                image_files.append(file)

        if image_files:
            image_path = image_files[0]

            converter = CrossStitchConverter()
            converter.convert(
                image_path=image_path,
                max_colors=20,
                max_stitches=80,
                output_dir="cross_stitch_output"
            )
        else:
            print("–í –ø–∞–ø–∫–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
    else:
        main()